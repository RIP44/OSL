#include<stdio.h>
#include<conio.h>
Void main() {
    int ms, bs, ef, n, nob, mp[10], tif = 0;  // Declare variables and arrays
    int i, p = 0;
    clrscr();  // Clear the screen
    printf("Enter the total memory available (in Bytes) -- ");
    scanf("%d", &ms);  // Input total memory available
    printf("Enter the block size (in Bytes) -- ");
    scanf("%d", &bs);  // Input block size
    nob = ms / bs;  // Calculate the number of blocks available
    ef = ms - nob * bs;  // Calculate external fragmentation
    printf("\nEnter the number of processes -- ");
    scanf("%d", &n);  // Input the number of processes

    // Input memory required for each process
    for (i = 0; i < n; i++) {
        printf("Enter memory required for process %d (in Bytes)-- ", i + 1);
        scanf("%d", &mp[i]);
    }
    
    printf("\nNo. of Blocks available in memory--%d", nob);
    printf("\n\nPROCESS\tMEMORYREQUIRED\tALLOCATED\tINTERNAL FRAGMENTATION");

    // Loop through each process and allocate memory if possible
    for (i = 0; i < n && p < nob; i++) {
        printf("\n %d\t\t%d", i + 1, mp[i]);
        if (mp[i] > bs)
            printf("\t\tNO\t\t---");
        else {
            printf("\t\tYES\t%d", bs - mp[i]);
            tif = tif + bs - mp[i];
            p++;
        }
    }

    // If there are remaining processes, output a message
    if (i < n)
        printf("\nMemory is Full, Remaining Processes cannot be accommodated");
    
    printf("\n\nTotal Internal Fragmentation is %d", tif);
    printf("\nTotal External Fragmentation is %d", ef);
    getch();  // Wait for a key press before exiting
}
